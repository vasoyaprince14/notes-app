<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Notes</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">

  <script>
    async function loadNotes() {
      const token = localStorage.getItem('x-auth-token');

      if (!token) {
        alert('No token found, please login first.');
        window.location.href = '/login';
        return;
      }

      try {
        const response = await fetch('/api/notes', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'x-auth-token': token
          }
        });

        if (!response.ok) {
          throw new Error('Failed to fetch notes');
        }

        const notes = await response.json();
        renderNotes(notes);
      } catch (error) {
        console.error('Error fetching notes:', error);
        alert('Failed to fetch notes. Please try again.');
      }
    }

    function renderNotes(notes) {
      const notesContainer = document.getElementById('notes-container');
      const noNotesMessage = document.getElementById('no-notes-message');
      notesContainer.innerHTML = '';

      if (notes.length === 0) {
        noNotesMessage.classList.remove('hidden');
      } else {
        noNotesMessage.classList.add('hidden');
        notes.forEach(note => {
          const noteItem = document.createElement('li');
          noteItem.classList.add('note-item', 'fade-in');
          noteItem.innerHTML = `
            <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow-lg dark:bg-gray-800 dark:border-gray-700">
              <h2 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">${note.title}</h2>
              <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">${truncate(note.content)}</p>
              <div class="flex justify-between items-center">
                <div>
                  <a href="api/notes/${note._id}" class="px-3 py-2 text-sm font-medium text-white bg-blue-700 rounded-lg dark:bg-blue-600 hover:bg-blue-800 dark:hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800">View</a>
                </div>
                <div>
                  <a href="/notes/edit/${note._id}" class="px-3 py-2 text-sm font-medium text-white bg-green-500 rounded-lg hover:bg-green-600 focus:ring-4 focus:outline-none focus:ring-green-300">Edit</a>
                  <form action="/api/notes/${note._id}" method="post" onsubmit="return deleteNote(event, '${note._id}')" style="display: inline;">
                    <button type="submit" class="px-3 py-2 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300">Delete</button>
                  </form>
                </div>
              </div>
            </div>
          `;
          notesContainer.appendChild(noteItem);
        });
      }
    }

    async function deleteNote(event, noteId) {
      event.preventDefault();

      const confirmation = confirm('Are you sure you want to delete this note? This action cannot be undone.');

      if (!confirmation) {
        return;
      }

      const token = localStorage.getItem('x-auth-token');

      try {
        const response = await fetch(`/api/notes/${noteId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'x-auth-token': token
          }
        });

        if (!response.ok) {
          throw new Error('Failed to delete note');
        }

        loadNotes();
      } catch (error) {
        console.error('Error deleting note:', error);
        alert('Failed to delete note. Please try again.');
      }
    }

    function truncate(content, maxLength = 37) {
      if (content.length <= maxLength) {
        return content;
      }
      return content.substring(0, maxLength) + '...';
    }

    function logout() {
      localStorage.removeItem('x-auth-token');
      localStorage.removeItem('id');
      window.location.href = '/login';
    }

    document.addEventListener('DOMContentLoaded', () => {
      loadNotes();
    });
  </script>
</head>
<body class="bg-gray-100 dark:bg-gray-900 min-h-screen">
  <header class="bg-white dark:bg-gray-800 shadow p-4">
    <div class="container mx-auto flex justify-between items-center">
      <h1 class="text-3xl font-bold text-gray-800 dark:text-white">Notes</h1>
      <div class="flex space-x-4">
        <a href="/notes/create" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:focus:ring-blue-800">Create New Note</a>
        <button onclick="logout()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-4 focus:ring-red-300 dark:focus:ring-red-800">Logout</button>
      </div>
    </div>
  </header>
  <main class="container mx-auto mt-8">
    <ul id="notes-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      <!-- Notes will be dynamically loaded here -->
    </ul>
    <div id="no-notes-message" class="hidden text-center mt-8">
      <p class="text-gray-700 dark:text-gray-400">You have no notes yet. Click the "Create New Note" button to get started!</p>
    </div>
  </main>
</body>
</html>
